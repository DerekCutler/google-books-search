{"version":3,"sources":["components/Grid/index.js","components/List/index.js","pages/Books.js","App.js","registerServiceWorker.js","index.js"],"names":["Container","_ref","fluid","children","react_default","a","createElement","className","concat","Row","_ref2","Col","_ref3","size","split","map","join","List","ListItem","Books","state","search","books","textInput","event","_this","setState","target","value","submitSearch","preventDefault","Axios","get","then","response","console","log","data","items","catch","error","booksArray","this","length","book","i","key","react_router_dom","to","volumeInfo","title","authors","type","name","onChange","onClick","Component","App","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c073fb58.chunk.js","sourcesContent":["import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}","import React from \"react\";\n\n// This file exports both the List and ListItem components\n\nexport function List({ children }) {\n  return (\n    <div className=\"list-overflow-container\">\n      <ul className=\"list-group\">{children}</ul>\n    </div>\n  );\n}\n\nexport function ListItem({ children }) {\n  return <li className=\"list-group-item\">{children}</li>;\n}","// eslint-disable-next-line no-unused-vars\nimport React, { Component } from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Axios from \"axios\"\nimport { List, ListItem } from \"../components/List\";\nimport { Link } from \"react-router-dom\";\n\n\nclass Books extends Component {\n  state = {\n    search: \"\",\n    books: []\n  }\n\n  textInput = (event) => {\n    this.setState({\n      search: event.target.value\n    })\n  }\n\n  submitSearch = (event) => {\n    event.preventDefault();\n    Axios.get('https://www.googleapis.com/books/v1/volumes?q=' + this.state.search)\n      .then((response) => {\n        console.log(response.data.items);\n        this.setState({\n          books: response.data.items\n        })\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  booksArray = () => {\n\n  }\n\n  render() {\n    return (\n      <Container>\n        <Col size=\"md-12\">\n          {this.state.books.length ? (\n            <List>\n              {this.state.books.map((book, i) => (\n                <ListItem key={i}>\n                  <Link to={\"/\"}>\n                    <strong>\n                      {book.volumeInfo.title} by {book.volumeInfo.authors}\n                    </strong>\n                  </Link>\n                  {/* <DeleteBtn onClick={() => this.deleteBook(book._id)} /> */}\n                </ListItem>\n              ))}\n            </List>\n          ) : (\n              <h3>Maybe you should search for a book...</h3>\n            )}\n        </Col>\n        <Row>\n          <Col size=\"md-12\">\n            <form>\n              <input type=\"text\" name=\"search\" onChange={this.textInput} />\n              <button type=\"submit\" onClick={this.submitSearch}>Search for a book</button>\n            </form>\n          </Col>\n        </Row>\n        <Row>\n\n        </Row>\n\n      </Container>\n    );\n  }\n}\nexport default Books;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n// import Nav from \"./components/Nav\";\nimport Books from \"./pages/Books\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        {/* <Nav /> */}\n          <Switch>\n            <Route exact path= \"/\" component={Books} />\n          </Switch>\n      </div>\n    </Router>\n    );\n}\n\nexport default App;","/* eslint-disable no-console */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === \"[::1]\" ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener(\"load\", () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (!isLocalhost) {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        } else {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          \"No internet connection found. App is running in offline mode.\"\n        );\n      });\n  }\n  \n  export function unregister() {\n    if (\"serviceWorker\" in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();"],"sourceRoot":""}